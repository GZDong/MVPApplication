原来mvc的模式在Android里是这样设计的，xml充当view，model就是我们访问数据库或网络的model层，Activity和
Fragment或其他view充当controller，那么这也就意味着我们需要将大多数的业务逻辑写在controller里，这会导致
类型膨胀，再一个是我们的view是可以直接访问model层的，会导致我们的controller更像一个view和controller的集合体

而mvp的模式，多一个presenter，将activity等看作是view层，只进行一些初始化和绑定工作，将view和model真正地
分开，让view和presenter以及model和presenter通过接口进行绑定，然后一个业务逻辑对应一个presenter

presenter持有activity等，加上持有的model可能要进行异步操作，那么意味着可能会出现内存泄漏，所以在将activity赋给
presenter的同时，也要考虑使用弱引用和onDestroy里进行解除绑定的操作
那么进行绑定，为了有通用性，最好定义一个顶级Activity等进行统一的绑定解除操作，同时，presenter也要提供绑定和解绑的操作，
为了统一和通用，也要定义一个presenter的顶级类，在那里做统一操作